<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using MR.Gestures.iOS;

<#
	var handlers = ReadFile();

    foreach(var handler in handlers.Where(h => h.Mac != null && h.Mac != h.iOS))
        RenderUsings(handler);

    RenderNamespace();

	foreach(var handler in handlers)
	{
		if(!string.IsNullOrEmpty(handler.iOS))
			RenderClass(handler.Name, handler.iOS);
	}
#>
<#+
	private void RenderUsings(HandlerModel handler)
    {
#>
#if IOS && !MACCATALYST
using PlatformView<#= handler.Name #> = <#= handler.iOS #>;
#elif MACCATALYST
using PlatformView<#= handler.Name #> = <#= handler.Mac #>;
#endif

<#+
        handler.iOS = "PlatformView" + handler.Name;
    }

	private void RenderNamespace()
    {
#>

namespace MR.Gestures.Handlers;

<#+
    }

	private void RenderClass(string handler, string platformView)
	{
#>
    public partial class <#= handler #>Handler : Microsoft.Maui.Handlers.<#= handler #>Handler
    {
        protected override void ConnectHandler(<#= platformView #> platformView)
        {
            base.ConnectHandler(platformView);
            iOSGestureHandler.OnElementChanged(null, (IGestureAwareControl)VirtualView, platformView);
        }
    }

<#+
	}

    private IEnumerable<HandlerModel> ReadFile()
    {
        string fileName = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "Handlers.json");
        StreamReader reader = new StreamReader(fileName);
        var handlers = System.Text.Json.JsonSerializer.Deserialize<HandlerModel[]>(reader.BaseStream);
        return handlers;
    }

[Serializable]
public class HandlerModel
{
    public string Name { get; set; }
    public bool Shared { get; set; }
    public string Android { get; set; }
    public string iOS { get; set; }
    public string Mac { get; set; }
    public string Windows { get; set; }
}

#>
