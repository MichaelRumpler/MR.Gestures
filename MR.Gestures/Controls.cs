
//          Controls.cs is automatically created by Controls.tt
//          changes in Controls.cs will get lost

using System;
using System.Diagnostics;
using System.Windows.Input;

namespace MR.Gestures
{
	#region AbsoluteLayout

	public partial class AbsoluteLayout : Microsoft.Maui.Controls.AbsoluteLayout, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public AbsoluteLayout()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ActivityIndicator

	public partial class ActivityIndicator : Microsoft.Maui.Controls.ActivityIndicator, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ActivityIndicator()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region BoxView

	public partial class BoxView : Microsoft.Maui.Controls.BoxView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public BoxView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Border

	public partial class Border : Microsoft.Maui.Controls.Border, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Border()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Button

	public partial class Button : Microsoft.Maui.Controls.Button, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Button()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region CheckBox

	public partial class CheckBox : Microsoft.Maui.Controls.CheckBox, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public CheckBox()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ContentPage

	public partial class ContentPage : Microsoft.Maui.Controls.ContentPage, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ContentPage()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ContentView

	public partial class ContentView : Microsoft.Maui.Controls.ContentView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ContentView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region DatePicker

	public partial class DatePicker : Microsoft.Maui.Controls.DatePicker, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public DatePicker()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Editor

	public partial class Editor : Microsoft.Maui.Controls.Editor, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Editor()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Entry

	public partial class Entry : Microsoft.Maui.Controls.Entry, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Entry()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region EntryCell

	public partial class EntryCell : Microsoft.Maui.Controls.EntryCell, IGestureAwareControl
	{
		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		new public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region FlexLayout

	public partial class FlexLayout : Microsoft.Maui.Controls.FlexLayout, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public FlexLayout()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Frame

	public partial class Frame : Microsoft.Maui.Controls.Frame, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Frame()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region GraphicsView

	public partial class GraphicsView : Microsoft.Maui.Controls.GraphicsView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public GraphicsView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Grid

	public partial class Grid : Microsoft.Maui.Controls.Grid, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Grid()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region HorizontalStackLayout

	public partial class HorizontalStackLayout : Microsoft.Maui.Controls.HorizontalStackLayout, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public HorizontalStackLayout()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Image

	public partial class Image : Microsoft.Maui.Controls.Image, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Image()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ImageButton

	public partial class ImageButton : Microsoft.Maui.Controls.ImageButton, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ImageButton()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ImageCell

	public partial class ImageCell : Microsoft.Maui.Controls.ImageCell, IGestureAwareControl
	{
		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		new public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region IndicatorView

	public partial class IndicatorView : Microsoft.Maui.Controls.IndicatorView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public IndicatorView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Label

	public partial class Label : Microsoft.Maui.Controls.Label, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Label()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ListView

	public partial class ListView : Microsoft.Maui.Controls.ListView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ListView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Picker

	public partial class Picker : Microsoft.Maui.Controls.Picker, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Picker()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ProgressBar

	public partial class ProgressBar : Microsoft.Maui.Controls.ProgressBar, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ProgressBar()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region RadioButton

	public partial class RadioButton : Microsoft.Maui.Controls.RadioButton, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public RadioButton()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ScrollView

	public partial class ScrollView : Microsoft.Maui.Controls.ScrollView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public ScrollView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region SearchBar

	public partial class SearchBar : Microsoft.Maui.Controls.SearchBar, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public SearchBar()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Slider

	public partial class Slider : Microsoft.Maui.Controls.Slider, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Slider()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region StackLayout

	public partial class StackLayout : Microsoft.Maui.Controls.StackLayout, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public StackLayout()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Stepper

	public partial class Stepper : Microsoft.Maui.Controls.Stepper, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Stepper()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region Switch

	public partial class Switch : Microsoft.Maui.Controls.Switch, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public Switch()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region SwitchCell

	public partial class SwitchCell : Microsoft.Maui.Controls.SwitchCell, IGestureAwareControl
	{
		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		new public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region TabbedPage

	public partial class TabbedPage : Microsoft.Maui.Controls.TabbedPage, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public TabbedPage()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region TableView

	public partial class TableView : Microsoft.Maui.Controls.TableView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public TableView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region TextCell

	public partial class TextCell : Microsoft.Maui.Controls.TextCell, IGestureAwareControl
	{
		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		new public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region TimePicker

	public partial class TimePicker : Microsoft.Maui.Controls.TimePicker, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public TimePicker()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region VerticalStackLayout

	public partial class VerticalStackLayout : Microsoft.Maui.Controls.VerticalStackLayout, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public VerticalStackLayout()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region ViewCell

	public partial class ViewCell : Microsoft.Maui.Controls.ViewCell, IGestureAwareControl
	{
		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		new public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion
	#region WebView

	public partial class WebView : Microsoft.Maui.Controls.WebView, IGestureAwareControl
	{
        #region Constructor, Loaded, Unloaded

        public WebView()
        {
			Loaded += LoadedHelper.Element_Loaded;
			Unloaded += LoadedHelper.Element_Unloaded;
        }

		#endregion

		#region GestureHandler

		private GestureHandler gestureHandler;
		public GestureHandler GestureHandler => gestureHandler ??= new GestureHandler(this);

		#endregion

		#region Down

		/// <summary>
		/// The event which is raised when a finger comes down. The finger(s) is/are still on the touch screen.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Down
		{
			add { GestureHandler.Down += value; OnPropertyChanged(nameof(Down)); }
			remove { GestureHandler.Down -= value; OnPropertyChanged(nameof(Down)); }
		}

		/// <summary>
		/// The BindableProperty for the DownCommand.
		/// </summary>
		public static readonly BindableProperty DownCommandProperty = GestureHandler.DownCommandProperty;
		/// <summary>
		/// The BindableProperty for the DownCommandParameter.
		/// </summary>
		public static readonly BindableProperty DownCommandParameterProperty = GestureHandler.DownCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger comes down. This is a bindable property.
		/// </summary>
		public ICommand DownCommand
		{
            get => (ICommand)GetValue(GestureHandler.DownCommandProperty);
            set => SetValue(GestureHandler.DownCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DownCommand. This is a bindable property.
		/// </summary>
		public object DownCommandParameter
		{
            get => GetValue(GestureHandler.DownCommandParameterProperty);
            set => SetValue(GestureHandler.DownCommandParameterProperty, value);
		}

		#endregion

		#region Up

		/// <summary>
		/// The event which is raised when a finger is lifted from the touch screen. There may be other fingers still on it.
		/// </summary>
		public event EventHandler<DownUpEventArgs> Up
		{
			add { GestureHandler.Up += value; OnPropertyChanged(nameof(Up)); }
			remove { GestureHandler.Up -= value; OnPropertyChanged(nameof(Up)); }
		}

		/// <summary>
		/// The BindableProperty for the UpCommand.
		/// </summary>
		public static readonly BindableProperty UpCommandProperty = GestureHandler.UpCommandProperty;
		/// <summary>
		/// The BindableProperty for the UpCommandParameter.
		/// </summary>
		public static readonly BindableProperty UpCommandParameterProperty = GestureHandler.UpCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when a finger is lifted from the touch screen. This is a bindable property.
		/// </summary>
		public ICommand UpCommand
		{
            get => (ICommand)GetValue(GestureHandler.UpCommandProperty);
            set => SetValue(GestureHandler.UpCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the UpCommand. This is a bindable property.
		/// </summary>
		public object UpCommandParameter
		{
            get => GetValue(GestureHandler.UpCommandParameterProperty);
            set => SetValue(GestureHandler.UpCommandParameterProperty, value);
		}

		#endregion

		#region Tapping

		/// <summary>
		/// The event which is raised when a finger comes down and up again.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapping
		{
			add { GestureHandler.Tapping += value; OnPropertyChanged(nameof(Tapping)); }
			remove { GestureHandler.Tapping -= value; OnPropertyChanged(nameof(Tapping)); }
		}

		/// <summary>
		/// The BindableProperty for the TappingCommand.
		/// </summary>
		public static readonly BindableProperty TappingCommandProperty = GestureHandler.TappingCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappingCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappingCommandParameterProperty = GestureHandler.TappingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped and another tap may follow. This is a bindable property.
		/// </summary>
		public ICommand TappingCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappingCommandProperty);
            set => SetValue(GestureHandler.TappingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappingCommand. This is a bindable property.
		/// </summary>
		public object TappingCommandParameter
		{
            get => GetValue(GestureHandler.TappingCommandParameterProperty);
            set => SetValue(GestureHandler.TappingCommandParameterProperty, value);
		}

		#endregion

		#region Tapped

		/// <summary>
		/// The event which is raised when no other touch gesture followed Tapping within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> Tapped
		{
			add { GestureHandler.Tapped += value; OnPropertyChanged(nameof(Tapped)); }
			remove { GestureHandler.Tapped -= value; OnPropertyChanged(nameof(Tapped)); }
		}

		/// <summary>
		/// The BindableProperty for the TappedCommand.
		/// </summary>
		public static readonly BindableProperty TappedCommandProperty = GestureHandler.TappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the TappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty TappedCommandParameterProperty = GestureHandler.TappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped. This is a bindable property.
		/// </summary>
		public ICommand TappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.TappedCommandProperty);
            set => SetValue(GestureHandler.TappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the TappedCommand. This is a bindable property.
		/// </summary>
		public object TappedCommandParameter
		{
            get => GetValue(GestureHandler.TappedCommandParameterProperty);
            set => SetValue(GestureHandler.TappedCommandParameterProperty, value);
		}

		#endregion

		#region DoubleTapped

		/// <summary>
		/// The event which is raised when two Tapping events came within 250ms.
		/// </summary>
		public event EventHandler<TapEventArgs> DoubleTapped
		{
			add { GestureHandler.DoubleTapped += value; OnPropertyChanged(nameof(DoubleTapped)); }
			remove { GestureHandler.DoubleTapped -= value; OnPropertyChanged(nameof(DoubleTapped)); }
		}

		/// <summary>
		/// The BindableProperty for the DoubleTappedCommand.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandProperty = GestureHandler.DoubleTappedCommandProperty;
		/// <summary>
		/// The BindableProperty for the DoubleTappedCommandParameter.
		/// </summary>
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = GestureHandler.DoubleTappedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is tapped twice. This is a bindable property.
		/// </summary>
		public ICommand DoubleTappedCommand
		{
            get => (ICommand)GetValue(GestureHandler.DoubleTappedCommandProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the DoubleTappedCommand. This is a bindable property.
		/// </summary>
		public object DoubleTappedCommandParameter
		{
            get => GetValue(GestureHandler.DoubleTappedCommandParameterProperty);
            set => SetValue(GestureHandler.DoubleTappedCommandParameterProperty, value);
		}

		#endregion

		#region LongPressing

		/// <summary>
		/// The event which is raised when a finger comes down and stays there.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressing
		{
			add { GestureHandler.LongPressing += value; OnPropertyChanged(nameof(LongPressing)); }
			remove { GestureHandler.LongPressing -= value; OnPropertyChanged(nameof(LongPressing)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressingCommand.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandProperty = GestureHandler.LongPressingCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressingCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressingCommandParameterProperty = GestureHandler.LongPressingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pressed long. This is a bindable property.
		/// </summary>
		public ICommand LongPressingCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressingCommandProperty);
            set => SetValue(GestureHandler.LongPressingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressingCommand. This is a bindable property.
		/// </summary>
		public object LongPressingCommandParameter
		{
            get => GetValue(GestureHandler.LongPressingCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressingCommandParameterProperty, value);
		}

		#endregion

		#region LongPressed

		/// <summary>
		/// The event which is raised when a finger finally comes up after a LongPressing event.
		/// </summary>
		public event EventHandler<LongPressEventArgs> LongPressed
		{
			add { GestureHandler.LongPressed += value; OnPropertyChanged(nameof(LongPressed)); }
			remove { GestureHandler.LongPressed -= value; OnPropertyChanged(nameof(LongPressed)); }
		}

		/// <summary>
		/// The BindableProperty for the LongPressedCommand.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandProperty = GestureHandler.LongPressedCommandProperty;
		/// <summary>
		/// The BindableProperty for the LongPressedCommandParameter.
		/// </summary>
		public static readonly BindableProperty LongPressedCommandParameterProperty = GestureHandler.LongPressedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the LongPressed event is raised. This is a bindable property.
		/// </summary>
		public ICommand LongPressedCommand
		{
            get => (ICommand)GetValue(GestureHandler.LongPressedCommandProperty);
            set => SetValue(GestureHandler.LongPressedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the LongPressedCommand. This is a bindable property.
		/// </summary>
		public object LongPressedCommandParameter
		{
            get => GetValue(GestureHandler.LongPressedCommandParameterProperty);
            set => SetValue(GestureHandler.LongPressedCommandParameterProperty, value);
		}

		#endregion

		#region Pinching

		/// <summary>
		/// The event which is raised when two fingers are moved together or away from each other.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinching
		{
			add { GestureHandler.Pinching += value; OnPropertyChanged(nameof(Pinching)); }
			remove { GestureHandler.Pinching -= value; OnPropertyChanged(nameof(Pinching)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchingCommand.
		/// </summary>
		public static readonly BindableProperty PinchingCommandProperty = GestureHandler.PinchingCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchingCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchingCommandParameterProperty = GestureHandler.PinchingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is pinched. This is a bindable property.
		/// </summary>
		public ICommand PinchingCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchingCommandProperty);
            set => SetValue(GestureHandler.PinchingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchingCommand. This is a bindable property.
		/// </summary>
		public object PinchingCommandParameter
		{
            get => GetValue(GestureHandler.PinchingCommandParameterProperty);
            set => SetValue(GestureHandler.PinchingCommandParameterProperty, value);
		}

		#endregion

		#region Pinched

		/// <summary>
		/// The event which is raised when at least one finger is released after a Pinching event.
		/// </summary>
		public event EventHandler<PinchEventArgs> Pinched
		{
			add { GestureHandler.Pinched += value; OnPropertyChanged(nameof(Pinched)); }
			remove { GestureHandler.Pinched -= value; OnPropertyChanged(nameof(Pinched)); }
		}

		/// <summary>
		/// The BindableProperty for the PinchedCommand.
		/// </summary>
		public static readonly BindableProperty PinchedCommandProperty = GestureHandler.PinchedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PinchedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PinchedCommandParameterProperty = GestureHandler.PinchedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the Pinched event is raised. This is a bindable property.
		/// </summary>
		public ICommand PinchedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PinchedCommandProperty);
            set => SetValue(GestureHandler.PinchedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PinchedCommand. This is a bindable property.
		/// </summary>
		public object PinchedCommandParameter
		{
            get => GetValue(GestureHandler.PinchedCommandParameterProperty);
            set => SetValue(GestureHandler.PinchedCommandParameterProperty, value);
		}

		#endregion

		#region Panning

		/// <summary>
		/// The event which is raised when a finger comes down and then moves in any direction.
		/// </summary>
		public event EventHandler<PanEventArgs> Panning
		{
			add { GestureHandler.Panning += value; OnPropertyChanged(nameof(Panning)); }
			remove { GestureHandler.Panning -= value; OnPropertyChanged(nameof(Panning)); }
		}

		/// <summary>
		/// The BindableProperty for the PanningCommand.
		/// </summary>
		public static readonly BindableProperty PanningCommandProperty = GestureHandler.PanningCommandProperty;
		/// <summary>
		/// The BindableProperty for the PanningCommandParameter.
		/// </summary>
		public static readonly BindableProperty PanningCommandParameterProperty = GestureHandler.PanningCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is panned. This is a bindable property.
		/// </summary>
		public ICommand PanningCommand
		{
            get => (ICommand)GetValue(GestureHandler.PanningCommandProperty);
            set => SetValue(GestureHandler.PanningCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PanningCommand. This is a bindable property.
		/// </summary>
		public object PanningCommandParameter
		{
            get => GetValue(GestureHandler.PanningCommandParameterProperty);
            set => SetValue(GestureHandler.PanningCommandParameterProperty, value);
		}

		#endregion

		#region Panned

		/// <summary>
		/// The event which is raised when a finger comes up after a Panning event.
		/// </summary>
		public event EventHandler<PanEventArgs> Panned
		{
			add { GestureHandler.Panned += value; OnPropertyChanged(nameof(Panned)); }
			remove { GestureHandler.Panned -= value; OnPropertyChanged(nameof(Panned)); }
		}

		/// <summary>
		/// The BindableProperty for the PannedCommand.
		/// </summary>
		public static readonly BindableProperty PannedCommandProperty = GestureHandler.PannedCommandProperty;
		/// <summary>
		/// The BindableProperty for the PannedCommandParameter.
		/// </summary>
		public static readonly BindableProperty PannedCommandParameterProperty = GestureHandler.PannedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was panned. This is a bindable property.
		/// </summary>
		public ICommand PannedCommand
		{
            get => (ICommand)GetValue(GestureHandler.PannedCommandProperty);
            set => SetValue(GestureHandler.PannedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the PannedCommand. This is a bindable property.
		/// </summary>
		public object PannedCommandParameter
		{
            get => GetValue(GestureHandler.PannedCommandParameterProperty);
            set => SetValue(GestureHandler.PannedCommandParameterProperty, value);
		}

		#endregion

		#region Swiped

		/// <summary>
		/// The event which is raised when a finger comes down, is moved and still moves when it is raised again.
		/// </summary>
		public event EventHandler<SwipeEventArgs> Swiped
		{
			add { GestureHandler.Swiped += value; OnPropertyChanged(nameof(Swiped)); }
			remove { GestureHandler.Swiped -= value; OnPropertyChanged(nameof(Swiped)); }
		}

		/// <summary>
		/// The BindableProperty for the SwipedCommand.
		/// </summary>
		public static readonly BindableProperty SwipedCommandProperty = GestureHandler.SwipedCommandProperty;
		/// <summary>
		/// The BindableProperty for the SwipedCommandParameter.
		/// </summary>
		public static readonly BindableProperty SwipedCommandParameterProperty = GestureHandler.SwipedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is swiped. This is a bindable property.
		/// </summary>
		public ICommand SwipedCommand
		{
            get => (ICommand)GetValue(GestureHandler.SwipedCommandProperty);
            set => SetValue(GestureHandler.SwipedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the SwipedCommand. This is a bindable property.
		/// </summary>
		public object SwipedCommandParameter
		{
            get => GetValue(GestureHandler.SwipedCommandParameterProperty);
            set => SetValue(GestureHandler.SwipedCommandParameterProperty, value);
		}

		#endregion

		#region Rotating

		/// <summary>
		/// The event which is raised when two fingers come down and their angle is changed.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotating
		{
			add { GestureHandler.Rotating += value; OnPropertyChanged(nameof(Rotating)); }
			remove { GestureHandler.Rotating -= value; OnPropertyChanged(nameof(Rotating)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatingCommand.
		/// </summary>
		public static readonly BindableProperty RotatingCommandProperty = GestureHandler.RotatingCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatingCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatingCommandParameterProperty = GestureHandler.RotatingCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element is rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatingCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatingCommandProperty);
            set => SetValue(GestureHandler.RotatingCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatingCommand. This is a bindable property.
		/// </summary>
		public object RotatingCommandParameter
		{
            get => GetValue(GestureHandler.RotatingCommandParameterProperty);
            set => SetValue(GestureHandler.RotatingCommandParameterProperty, value);
		}

		#endregion

		#region Rotated

		/// <summary>
		/// The event which is raised when at least one finger is lifted after a Rotating event.
		/// </summary>
		public event EventHandler<RotateEventArgs> Rotated
		{
			add { GestureHandler.Rotated += value; OnPropertyChanged(nameof(Rotated)); }
			remove { GestureHandler.Rotated -= value; OnPropertyChanged(nameof(Rotated)); }
		}

		/// <summary>
		/// The BindableProperty for the RotatedCommand.
		/// </summary>
		public static readonly BindableProperty RotatedCommandProperty = GestureHandler.RotatedCommandProperty;
		/// <summary>
		/// The BindableProperty for the RotatedCommandParameter.
		/// </summary>
		public static readonly BindableProperty RotatedCommandParameterProperty = GestureHandler.RotatedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the element was rotated. This is a bindable property.
		/// </summary>
		public ICommand RotatedCommand
		{
            get => (ICommand)GetValue(GestureHandler.RotatedCommandProperty);
            set => SetValue(GestureHandler.RotatedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the RotatedCommand. This is a bindable property.
		/// </summary>
		public object RotatedCommandParameter
		{
            get => GetValue(GestureHandler.RotatedCommandParameterProperty);
            set => SetValue(GestureHandler.RotatedCommandParameterProperty, value);
		}

		#endregion

		#region MouseEntered

		/// <summary>
		/// The event which is raised when the mouse pointer entered the area over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseEntered
		{
			add { GestureHandler.MouseEntered += value; OnPropertyChanged(nameof(MouseEntered)); }
			remove { GestureHandler.MouseEntered -= value; OnPropertyChanged(nameof(MouseEntered)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseEnteredCommand.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandProperty = GestureHandler.MouseEnteredCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseEnteredCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = GestureHandler.MouseEnteredCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer entered. This is a bindable property.
		/// </summary>
		public ICommand MouseEnteredCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseEnteredCommandProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseEnteredCommand. This is a bindable property.
		/// </summary>
		public object MouseEnteredCommandParameter
		{
            get => GetValue(GestureHandler.MouseEnteredCommandParameterProperty);
            set => SetValue(GestureHandler.MouseEnteredCommandParameterProperty, value);
		}

		#endregion

		#region MouseMoved

		/// <summary>
		/// The event which is raised when the mouse pointer moved over the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseMoved
		{
			add { GestureHandler.MouseMoved += value; OnPropertyChanged(nameof(MouseMoved)); }
			remove { GestureHandler.MouseMoved -= value; OnPropertyChanged(nameof(MouseMoved)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseMovedCommand.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandProperty = GestureHandler.MouseMovedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseMovedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseMovedCommandParameterProperty = GestureHandler.MouseMovedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer moved. This is a bindable property.
		/// </summary>
		public ICommand MouseMovedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseMovedCommandProperty);
            set => SetValue(GestureHandler.MouseMovedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseMovedCommand. This is a bindable property.
		/// </summary>
		public object MouseMovedCommandParameter
		{
            get => GetValue(GestureHandler.MouseMovedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseMovedCommandParameterProperty, value);
		}

		#endregion

		#region MouseExited

		/// <summary>
		/// The event which is raised when the mouse pointer was moved away from the view.
		/// </summary>
		public event EventHandler<MouseEventArgs> MouseExited
		{
			add { GestureHandler.MouseExited += value; OnPropertyChanged(nameof(MouseExited)); }
			remove { GestureHandler.MouseExited -= value; OnPropertyChanged(nameof(MouseExited)); }
		}

		/// <summary>
		/// The BindableProperty for the MouseExitedCommand.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandProperty = GestureHandler.MouseExitedCommandProperty;
		/// <summary>
		/// The BindableProperty for the MouseExitedCommandParameter.
		/// </summary>
		public static readonly BindableProperty MouseExitedCommandParameterProperty = GestureHandler.MouseExitedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the mouse pointer exited. This is a bindable property.
		/// </summary>
		public ICommand MouseExitedCommand
		{
            get => (ICommand)GetValue(GestureHandler.MouseExitedCommandProperty);
            set => SetValue(GestureHandler.MouseExitedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the MouseExitedCommand. This is a bindable property.
		/// </summary>
		public object MouseExitedCommandParameter
		{
            get => GetValue(GestureHandler.MouseExitedCommandParameterProperty);
            set => SetValue(GestureHandler.MouseExitedCommandParameterProperty, value);
		}

		#endregion

		#region ScrollWheelChanged

		/// <summary>
		/// The event which is raised when the scroll wheel was used.
		/// </summary>
		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged
		{
			add { GestureHandler.ScrollWheelChanged += value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
			remove { GestureHandler.ScrollWheelChanged -= value; OnPropertyChanged(nameof(ScrollWheelChanged)); }
		}

		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommand.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = GestureHandler.ScrollWheelChangedCommandProperty;
		/// <summary>
		/// The BindableProperty for the ScrollWheelChangedCommandParameter.
		/// </summary>
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = GestureHandler.ScrollWheelChangedCommandParameterProperty;

		/// <summary>
		/// Gets or sets the command which is executed when the scroll wheel was used. This is a bindable property.
		/// </summary>
		public ICommand ScrollWheelChangedCommand
		{
            get => (ICommand)GetValue(GestureHandler.ScrollWheelChangedCommandProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandProperty, value);
		}

		/// <summary>
		/// Gets or sets the parameter to pass to the ScrollWheelChangedCommand. This is a bindable property.
		/// </summary>
		public object ScrollWheelChangedCommandParameter
		{
            get => GetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty);
            set => SetValue(GestureHandler.ScrollWheelChangedCommandParameterProperty, value);
		}

		#endregion
	}

	#endregion

	#region GestureHandler

	public partial class GestureHandler : IGestureListener
	{
		#region List of all property names

		public static readonly string[] AllProperties = new[] {
			"Down", "DownCommand", "DownCommandParameter",
			"Up", "UpCommand", "UpCommandParameter",
			"Tapping", "TappingCommand", "TappingCommandParameter",
			"Tapped", "TappedCommand", "TappedCommandParameter",
			"DoubleTapped", "DoubleTappedCommand", "DoubleTappedCommandParameter",
			"LongPressing", "LongPressingCommand", "LongPressingCommandParameter",
			"LongPressed", "LongPressedCommand", "LongPressedCommandParameter",
			"Pinching", "PinchingCommand", "PinchingCommandParameter",
			"Pinched", "PinchedCommand", "PinchedCommandParameter",
			"Panning", "PanningCommand", "PanningCommandParameter",
			"Panned", "PannedCommand", "PannedCommandParameter",
			"Swiped", "SwipedCommand", "SwipedCommandParameter",
			"Rotating", "RotatingCommand", "RotatingCommandParameter",
			"Rotated", "RotatedCommand", "RotatedCommandParameter",
			"MouseEntered", "MouseEnteredCommand", "MouseEnteredCommandParameter",
			"MouseMoved", "MouseMovedCommand", "MouseMovedCommandParameter",
			"MouseExited", "MouseExitedCommand", "MouseExitedCommandParameter",
			"ScrollWheelChanged", "ScrollWheelChangedCommand", "ScrollWheelChangedCommandParameter",
		};

		#endregion

		#region Public Events and BindableProperties

		public event EventHandler<DownUpEventArgs> Down;
		public static readonly BindableProperty DownCommandProperty = BindableProperty.Create("DownCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty DownCommandParameterProperty = BindableProperty.Create("DownCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<DownUpEventArgs> Up;
		public static readonly BindableProperty UpCommandProperty = BindableProperty.Create("UpCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty UpCommandParameterProperty = BindableProperty.Create("UpCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<TapEventArgs> Tapping;
		public static readonly BindableProperty TappingCommandProperty = BindableProperty.Create("TappingCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty TappingCommandParameterProperty = BindableProperty.Create("TappingCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<TapEventArgs> Tapped;
		public static readonly BindableProperty TappedCommandProperty = BindableProperty.Create("TappedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty TappedCommandParameterProperty = BindableProperty.Create("TappedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<TapEventArgs> DoubleTapped;
		public static readonly BindableProperty DoubleTappedCommandProperty = BindableProperty.Create("DoubleTappedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty DoubleTappedCommandParameterProperty = BindableProperty.Create("DoubleTappedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<LongPressEventArgs> LongPressing;
		public static readonly BindableProperty LongPressingCommandProperty = BindableProperty.Create("LongPressingCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty LongPressingCommandParameterProperty = BindableProperty.Create("LongPressingCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<LongPressEventArgs> LongPressed;
		public static readonly BindableProperty LongPressedCommandProperty = BindableProperty.Create("LongPressedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty LongPressedCommandParameterProperty = BindableProperty.Create("LongPressedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<PinchEventArgs> Pinching;
		public static readonly BindableProperty PinchingCommandProperty = BindableProperty.Create("PinchingCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty PinchingCommandParameterProperty = BindableProperty.Create("PinchingCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<PinchEventArgs> Pinched;
		public static readonly BindableProperty PinchedCommandProperty = BindableProperty.Create("PinchedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty PinchedCommandParameterProperty = BindableProperty.Create("PinchedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<PanEventArgs> Panning;
		public static readonly BindableProperty PanningCommandProperty = BindableProperty.Create("PanningCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty PanningCommandParameterProperty = BindableProperty.Create("PanningCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<PanEventArgs> Panned;
		public static readonly BindableProperty PannedCommandProperty = BindableProperty.Create("PannedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty PannedCommandParameterProperty = BindableProperty.Create("PannedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<SwipeEventArgs> Swiped;
		public static readonly BindableProperty SwipedCommandProperty = BindableProperty.Create("SwipedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty SwipedCommandParameterProperty = BindableProperty.Create("SwipedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<RotateEventArgs> Rotating;
		public static readonly BindableProperty RotatingCommandProperty = BindableProperty.Create("RotatingCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty RotatingCommandParameterProperty = BindableProperty.Create("RotatingCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<RotateEventArgs> Rotated;
		public static readonly BindableProperty RotatedCommandProperty = BindableProperty.Create("RotatedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty RotatedCommandParameterProperty = BindableProperty.Create("RotatedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<MouseEventArgs> MouseEntered;
		public static readonly BindableProperty MouseEnteredCommandProperty = BindableProperty.Create("MouseEnteredCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty MouseEnteredCommandParameterProperty = BindableProperty.Create("MouseEnteredCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<MouseEventArgs> MouseMoved;
		public static readonly BindableProperty MouseMovedCommandProperty = BindableProperty.Create("MouseMovedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty MouseMovedCommandParameterProperty = BindableProperty.Create("MouseMovedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<MouseEventArgs> MouseExited;
		public static readonly BindableProperty MouseExitedCommandProperty = BindableProperty.Create("MouseExitedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty MouseExitedCommandParameterProperty = BindableProperty.Create("MouseExitedCommandParameter", typeof(object), typeof(GestureHandler), null);

		public event EventHandler<ScrollWheelEventArgs> ScrollWheelChanged;
		public static readonly BindableProperty ScrollWheelChangedCommandProperty = BindableProperty.Create("ScrollWheelChangedCommand", typeof(ICommand), typeof(GestureHandler), null);
		public static readonly BindableProperty ScrollWheelChangedCommandParameterProperty = BindableProperty.Create("ScrollWheelChangedCommandParameter", typeof(object), typeof(GestureHandler), null);

		#endregion

		#region Handles* and On* Methods

		public bool HandlesDown => Down != null || Element.DownCommand != null;

		public bool OnDown(DownUpEventArgs args)
		{
			var handled = false;

			if (HandlesDown)
			{
				RaiseEvent(Down, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.DownCommand;
					parameter = Element.DownCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesUp => Up != null || Element.UpCommand != null;

		public bool OnUp(DownUpEventArgs args)
		{
			var handled = false;

			if (HandlesUp)
			{
				RaiseEvent(Up, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.UpCommand;
					parameter = Element.UpCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesTapping => Tapping != null || Element.TappingCommand != null;

		public bool OnTapping(TapEventArgs args)
		{
			var handled = false;

			if (HandlesTapping)
			{
				RaiseEvent(Tapping, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.TappingCommand;
					parameter = Element.TappingCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesTapped => Tapped != null || Element.TappedCommand != null;

		public bool OnTapped(TapEventArgs args)
		{
			var handled = false;

			if (HandlesTapped)
			{
				RaiseEvent(Tapped, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.TappedCommand;
					parameter = Element.TappedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesDoubleTapped => DoubleTapped != null || Element.DoubleTappedCommand != null;

		public bool OnDoubleTapped(TapEventArgs args)
		{
			var handled = false;

			if (HandlesDoubleTapped)
			{
				RaiseEvent(DoubleTapped, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.DoubleTappedCommand;
					parameter = Element.DoubleTappedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesLongPressing => LongPressing != null || Element.LongPressingCommand != null;

		public bool OnLongPressing(LongPressEventArgs args)
		{
			var handled = false;

			if (HandlesLongPressing)
			{
				RaiseEvent(LongPressing, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.LongPressingCommand;
					parameter = Element.LongPressingCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesLongPressed => LongPressed != null || Element.LongPressedCommand != null;

		public bool OnLongPressed(LongPressEventArgs args)
		{
			var handled = false;

			if (HandlesLongPressed)
			{
				RaiseEvent(LongPressed, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.LongPressedCommand;
					parameter = Element.LongPressedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesPinching => Pinching != null || Element.PinchingCommand != null;

		public bool OnPinching(PinchEventArgs args)
		{
			var handled = false;

			if (HandlesPinching)
			{
				RaiseEvent(Pinching, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.PinchingCommand;
					parameter = Element.PinchingCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesPinched => Pinched != null || Element.PinchedCommand != null;

		public bool OnPinched(PinchEventArgs args)
		{
			var handled = false;

			if (HandlesPinched)
			{
				RaiseEvent(Pinched, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.PinchedCommand;
					parameter = Element.PinchedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesPanning => Panning != null || Element.PanningCommand != null;

		public bool OnPanning(PanEventArgs args)
		{
			var handled = false;

			if (HandlesPanning)
			{
				RaiseEvent(Panning, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.PanningCommand;
					parameter = Element.PanningCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesPanned => Panned != null || Element.PannedCommand != null;

		public bool OnPanned(PanEventArgs args)
		{
			var handled = false;

			if (HandlesPanned)
			{
				RaiseEvent(Panned, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.PannedCommand;
					parameter = Element.PannedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesSwiped => Swiped != null || Element.SwipedCommand != null;

		public bool OnSwiped(SwipeEventArgs args)
		{
			var handled = false;

			if (HandlesSwiped)
			{
				RaiseEvent(Swiped, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.SwipedCommand;
					parameter = Element.SwipedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesRotating => Rotating != null || Element.RotatingCommand != null;

		public bool OnRotating(RotateEventArgs args)
		{
			var handled = false;

			if (HandlesRotating)
			{
				RaiseEvent(Rotating, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.RotatingCommand;
					parameter = Element.RotatingCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesRotated => Rotated != null || Element.RotatedCommand != null;

		public bool OnRotated(RotateEventArgs args)
		{
			var handled = false;

			if (HandlesRotated)
			{
				RaiseEvent(Rotated, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.RotatedCommand;
					parameter = Element.RotatedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesMouseEntered => MouseEntered != null || Element.MouseEnteredCommand != null;

		public bool OnMouseEntered(MouseEventArgs args)
		{
			var handled = false;

			if (HandlesMouseEntered)
			{
				RaiseEvent(MouseEntered, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.MouseEnteredCommand;
					parameter = Element.MouseEnteredCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesMouseMoved => MouseMoved != null || Element.MouseMovedCommand != null;

		public bool OnMouseMoved(MouseEventArgs args)
		{
			var handled = false;

			if (HandlesMouseMoved)
			{
				RaiseEvent(MouseMoved, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.MouseMovedCommand;
					parameter = Element.MouseMovedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesMouseExited => MouseExited != null || Element.MouseExitedCommand != null;

		public bool OnMouseExited(MouseEventArgs args)
		{
			var handled = false;

			if (HandlesMouseExited)
			{
				RaiseEvent(MouseExited, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.MouseExitedCommand;
					parameter = Element.MouseExitedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		public bool HandlesScrollWheelChanged => ScrollWheelChanged != null || Element.ScrollWheelChangedCommand != null;

		public bool OnScrollWheelChanged(ScrollWheelEventArgs args)
		{
			var handled = false;

			if (HandlesScrollWheelChanged)
			{
				RaiseEvent(ScrollWheelChanged, args);

				ICommand command = null;
				object parameter = null;
				try
				{
					command = Element.ScrollWheelChangedCommand;
					parameter = Element.ScrollWheelChangedCommandParameter;
				}
				catch (Exception ex) { Debug.WriteLine(ex); }
				ExecuteCommand(command, parameter, args);

				handled = args.Handled;
			}

			return handled;
		}
		#endregion
	}

	#endregion
}
